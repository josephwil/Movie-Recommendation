# -*- coding: utf-8 -*-
"""Movie Recommendation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CiG5vEpHJ689L2zSmJoHTAUtp1TejM57

Movie Recommendation

Objective:
The goal of the movie recommendation system is to enhance user satisfaction by providing personalized movie suggestions based on individual preferences and viewing history. Utilizing advanced machine learning techniques, the system aims to increase user engagement, improve content discovery, and optimize retention rates. By implementing both collaborative and content-based filtering methods, the system ensures a comprehensive recommendation strategy. Ultimately, this leads to higher user satisfaction and increased revenue for the platform through sustained user interaction and content consumption.

DATA SOURCE

'https://raw.githubusercontent.com/YBI-Foundation/Dataset/main/Movies%20Recommendation.csv');

Import Library
"""

import pandas as pd

import numpy as np

"""Import Data"""

df = pd.read_csv(r'https://raw.githubusercontent.com/YBI-Foundation/Dataset/main/Movies%20Recommendation.csv');

"""Describe Data"""

df.head()

"""Data Visualization"""

df.info()

"""Data Preprocessing"""

df.shape

df.columns

df_abcdef= df[['Movie_Genre','Movie_Keywords','Movie_Tagline','Movie_Cast','Movie_Director']].fillna('')

df_abcdef.shape

df_abcdef.head()

"""Define Target Variable (y) and Feature Variables (X)"""

X = df_abcdef['Movie_Genre'] +' '+ df_abcdef['Movie_Keywords'] +' '+ df_abcdef['Movie_Tagline'] +' '+ df_abcdef['Movie_Cast'] +' '+ df_abcdef['Movie_Director']

X.shape

"""Train Test Split

"""

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf = TfidfVectorizer()

X = tfidf.fit_transform(X)

X.shape

print(X)

"""Modeling

"""

from sklearn.metrics.pairwise import cosine_similarity

similarity_score = cosine_similarity(X)

similarity_score

similarity_score.shape

Favourite_Movie_Name = input('Enter your favourite movie name: ')

all_movies_title_list = df['Movie_Title'].tolist()

"""Model Evaluation

"""

import difflib

Movie_Reccomendation = difflib.get_close_matches(Favourite_Movie_Name, all_movies_title_list)
print(Movie_Reccomendation)

close_Match = Movie_Reccomendation[0]
print(close_Match)

Index_of_Close_Match_Movie = df[df.Movie_Title == close_Match]['Movie_ID'].values[0]
print(Index_of_Close_Match_Movie)

Recommendation_Score = list(enumerate(similarity_score[Index_of_Close_Match_Movie]))

len(Recommendation_Score)

"""Prediction"""

sorted_similar_movies = sorted(Recommendation_Score, key = lambda x:x[1], reverse = True)
print(sorted_similar_movies)

print('Top 30 Movies Suggested for you: \n')
i=1
for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = df[df.index == index]['Movie_Title'].values[0]
  if (i<31):
    print(i, '.', title_from_index)
    i+=1

Movie_Name = input('Enter your favourite movie name: ')
list_of_all_titles = df['Movie_Title'].tolist()

Find_Close_Match = difflib.get_close_matches(Movie_Name, list_of_all_titles)

Close_Match = Find_Close_Match[0]

Index_of_Movie = df[df.Movie_Title == Close_Match]['Movie_ID'].values[0]

Recommendation_Score = list(enumerate(similarity_score[Index_of_Movie]))

sorted_similar_movies = sorted(Recommendation_Score, key = lambda x:x[1], reverse = True)

print('Top 10 Movies Suggested for you: \n')
i = 1
for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = df[df.Movie_ID == index]['Movie_Title'].values
  if (i<11):
    print(i, '.', title_from_index)
    i+=1

"""A movie recommendation system is a sophisticated tool designed to suggest films to users based on their individual preferences and viewing history. These systems leverage advanced machine learning algorithms to analyze user data and predict what movies a user might enjoy.

Key Components:

Data Collection: The system gathers data from various sources, including user ratings, viewing history, and demographic information. This data forms the foundation for generating recommendations.

Filtering Techniques: There are two primary filtering methods used:
Collaborative Filtering: This method recommends movies based on the preferences of similar users. If users with similar tastes liked a particular movie, the system suggests it to others in that group.
Content-Based Filtering: This approach recommends movies with similar attributes to those the user has previously enjoyed. For example, if a user likes action movies, the system will suggest other action films.

Hybrid Systems: Many modern recommendation systems combine both collaborative and content-based filtering to provide more accurate and diverse suggestions.

Benefits:

Personalization: By tailoring recommendations to individual tastes, the system enhances user satisfaction and engagement.
Discovery: Users can discover new movies they might not have found on their own, broadening their viewing experience.
Retention: Personalized recommendations help keep users engaged with the platform, increasing retention rates.
Revenue Growth: For subscription-based or pay-per-view platforms, effective recommendations can lead to increased content consumption and higher revenue.

Challenges:

Data Privacy: Ensuring user data is handled securely and ethically is paramount.
Cold Start Problem: New users with little to no viewing history can be challenging to provide accurate recommendations for.
Scalability: As the user base grows, the system must efficiently handle large volumes of data and provide real-time recommendations.
In summary, a movie recommendation system is a powerful tool that enhances user experience by providing personalized movie suggestions, driving engagement, and supporting the platformâ€™s growth.
"""